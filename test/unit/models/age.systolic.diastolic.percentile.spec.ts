import { DefaultEntityMock } from '../../mocks/models/default.entity.mock'
import { assert } from 'chai'
import { AgeSystolicDiastolicPercentile } from '../../../src/application/domain/model/age.systolic.diastolic.percentile'

describe('Models: AgeSystolicDiastolicPercentile', () => {
    describe('fromJSON()', () => {
        context('when transform json to model', () => {
            it('should return a complete model for pass all parameters', () => {
                const result: AgeSystolicDiastolicPercentile =
                    new AgeSystolicDiastolicPercentile().fromJSON(DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE)
                assert.propertyVal(result, 'age', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.age)
                assert.propertyVal(result, 'percentile', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.percentile)
                assert.propertyVal(result, 'pas_5', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_5)
                assert.propertyVal(result, 'pas_10', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_10)
                assert.propertyVal(result, 'pas_25', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_25)
                assert.propertyVal(result, 'pas_50', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_50)
                assert.propertyVal(result, 'pas_75', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_75)
                assert.propertyVal(result, 'pas_90', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_90)
                assert.propertyVal(result, 'pas_95', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_95)
                assert.propertyVal(result, 'pad_5', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_5)
                assert.propertyVal(result, 'pad_10', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_10)
                assert.propertyVal(result, 'pad_25', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_25)
                assert.propertyVal(result, 'pad_50', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_50)
                assert.propertyVal(result, 'pad_75', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_75)
                assert.propertyVal(result, 'pad_90', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_90)
                assert.propertyVal(result, 'pad_95', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_95)
            })

            it('should return a incomplete model for not pass all parameters', () => {
                const result: AgeSystolicDiastolicPercentile = new AgeSystolicDiastolicPercentile().fromJSON({})
                assert.propertyVal(result, 'age', undefined)
                assert.propertyVal(result, 'percentile', undefined)
                assert.propertyVal(result, 'pas_5', undefined)
                assert.propertyVal(result, 'pas_10', undefined)
                assert.propertyVal(result, 'pas_25', undefined)
                assert.propertyVal(result, 'pas_50', undefined)
                assert.propertyVal(result, 'pas_75', undefined)
                assert.propertyVal(result, 'pas_90', undefined)
                assert.propertyVal(result, 'pas_95', undefined)
                assert.propertyVal(result, 'pad_5', undefined)
                assert.propertyVal(result, 'pad_10', undefined)
                assert.propertyVal(result, 'pad_25', undefined)
                assert.propertyVal(result, 'pad_50', undefined)
                assert.propertyVal(result, 'pad_75', undefined)
                assert.propertyVal(result, 'pad_90', undefined)
                assert.propertyVal(result, 'pad_95', undefined)
            })
        })

        context('when pass a json as string', () => {
            it('should return a complete model for pass all parameters', () => {
                const result: AgeSystolicDiastolicPercentile =
                    new AgeSystolicDiastolicPercentile()
                        .fromJSON(JSON.stringify(DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE))
                assert.propertyVal(result, 'age', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.age)
                assert.propertyVal(result, 'percentile', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.percentile)
                assert.propertyVal(result, 'pas_5', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_5)
                assert.propertyVal(result, 'pas_10', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_10)
                assert.propertyVal(result, 'pas_25', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_25)
                assert.propertyVal(result, 'pas_50', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_50)
                assert.propertyVal(result, 'pas_75', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_75)
                assert.propertyVal(result, 'pas_90', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_90)
                assert.propertyVal(result, 'pas_95', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_95)
                assert.propertyVal(result, 'pad_5', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_5)
                assert.propertyVal(result, 'pad_10', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_10)
                assert.propertyVal(result, 'pad_25', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_25)
                assert.propertyVal(result, 'pad_50', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_50)
                assert.propertyVal(result, 'pad_75', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_75)
                assert.propertyVal(result, 'pad_90', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_90)
                assert.propertyVal(result, 'pad_95', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_95)
            })

            it('should return a incomplete model for not pass all parameters', () => {
                const result: AgeSystolicDiastolicPercentile = new AgeSystolicDiastolicPercentile().fromJSON('')
                assert.propertyVal(result, 'age', undefined)
                assert.propertyVal(result, 'percentile', undefined)
                assert.propertyVal(result, 'pas_5', undefined)
                assert.propertyVal(result, 'pas_10', undefined)
                assert.propertyVal(result, 'pas_25', undefined)
                assert.propertyVal(result, 'pas_50', undefined)
                assert.propertyVal(result, 'pas_75', undefined)
                assert.propertyVal(result, 'pas_90', undefined)
                assert.propertyVal(result, 'pas_95', undefined)
                assert.propertyVal(result, 'pad_5', undefined)
                assert.propertyVal(result, 'pad_10', undefined)
                assert.propertyVal(result, 'pad_25', undefined)
                assert.propertyVal(result, 'pad_50', undefined)
                assert.propertyVal(result, 'pad_75', undefined)
                assert.propertyVal(result, 'pad_90', undefined)
                assert.propertyVal(result, 'pad_95', undefined)
            })

            it('should return a incomplete model for pass invalid json string', () => {
                const result: AgeSystolicDiastolicPercentile = new AgeSystolicDiastolicPercentile().fromJSON('invalid')
                assert.propertyVal(result, 'age', undefined)
                assert.propertyVal(result, 'percentile', undefined)
                assert.propertyVal(result, 'pas_5', undefined)
                assert.propertyVal(result, 'pas_10', undefined)
                assert.propertyVal(result, 'pas_25', undefined)
                assert.propertyVal(result, 'pas_50', undefined)
                assert.propertyVal(result, 'pas_75', undefined)
                assert.propertyVal(result, 'pas_90', undefined)
                assert.propertyVal(result, 'pas_95', undefined)
                assert.propertyVal(result, 'pad_5', undefined)
                assert.propertyVal(result, 'pad_10', undefined)
                assert.propertyVal(result, 'pad_25', undefined)
                assert.propertyVal(result, 'pad_50', undefined)
                assert.propertyVal(result, 'pad_75', undefined)
                assert.propertyVal(result, 'pad_90', undefined)
                assert.propertyVal(result, 'pad_95', undefined)
            })
        })
    })

    describe('toJSON()', () => {
        it('should return a json with all parameters', () => {
            const model: AgeSystolicDiastolicPercentile =
                new AgeSystolicDiastolicPercentile().fromJSON(DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE)
            const result = model.toJSON()
            assert.propertyVal(result, 'age', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.age)
            assert.propertyVal(result, 'percentile', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.percentile)
            assert.propertyVal(result, 'pas_5', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_5)
            assert.propertyVal(result, 'pas_10', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_10)
            assert.propertyVal(result, 'pas_25', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_25)
            assert.propertyVal(result, 'pas_50', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_50)
            assert.propertyVal(result, 'pas_75', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_75)
            assert.propertyVal(result, 'pas_90', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_90)
            assert.propertyVal(result, 'pas_95', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pas_95)
            assert.propertyVal(result, 'pad_5', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_5)
            assert.propertyVal(result, 'pad_10', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_10)
            assert.propertyVal(result, 'pad_25', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_25)
            assert.propertyVal(result, 'pad_50', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_50)
            assert.propertyVal(result, 'pad_75', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_75)
            assert.propertyVal(result, 'pad_90', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_90)
            assert.propertyVal(result, 'pad_95', DefaultEntityMock.AGE_SYSTOLIC_DIASTOLIC_PERCENTILE.pad_95)
        })
    })
})
